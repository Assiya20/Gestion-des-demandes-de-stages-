from odoo import models, fields, api
from odoo.exceptions import ValidationError

class Request(models.Model):
    _name = 'gestion_documents_stage.request'
    _description = 'Demande de Stage'

    # Informations de l'√©tudiant
    name = fields.Char(string="Nom de l'√âtudiant", required=True, tracking=True)
    email = fields.Char(string="Email", required=True)
    cne = fields.Char(string="CNE", required=True)
    genre = fields.Selection([
        ('male', 'Homme'),
        ('female', 'Femme')
    ], string="Genre", required=True)
    niveau = fields.Selection([
        ('1a', 'Premi√®re ann√©e du cycle d‚Äôing√©nieur'),
        ('2a', 'Deuxi√®me ann√©e du cycle d‚Äôing√©nieur'),
        ('3a', 'Troisi√®me ann√©e du cycle d‚Äôing√©nieur'),
    ], string="Niveau", required=True)

    specialite = fields.Selection([
        ('itrc', 'Ing√©nierie des Technologies de l‚ÄôInformation et R√©seaux de Communication'),
        ('dscc', 'Ing√©nierie Data Sciences et Cloud Computing'),
        ('gc', 'G√©nie Civil'),
        ('ge', 'G√©nie √âlectrique'),
        ('gi', 'G√©nie Industriel'),
        ('ginf', 'G√©nie Informatique'),
        ('gseir', 'G√©nie des Syst√®mes √âlectronique, Informatique et R√©seaux'),
        ('sic', 'S√©curit√© Informatique et Cyber S√©curit√©'),
        ('mgsi', 'Management et Gouvernance des Syst√®mes d‚ÄôInformation'),
    ], string="Sp√©cialit√©", required=True)
    annee_universitaire = fields.Char(string="Ann√©e Universitaire", required=True)
    # Informations de l'entreprise
    entreprise = fields.Char(string="Entreprise d'accueil", required=True)
    adresse_entreprise = fields.Char(string="Adresse de l‚ÄôEntreprise", required=True)
    ville_entreprise = fields.Char(string="Ville de l‚ÄôEntreprise", required=True)
    telephone_entreprise = fields.Char(string="T√©l√©phone / Fax de l‚ÄôEntreprise", required=True)
    tuteur_entreprise = fields.Char(string="Tuteur en Entreprise", required=True)
    tuteur_academique = fields.Char(string="Tuteur Acad√©mique", required=True)

            # Dates du stage
    date_debut = fields.Date(string="Date de D√©but", required=True)
    date_fin = fields.Date(string="Date de Fin", required=True)
    # Statut de la demande
    state = fields.Selection([
        ('draft', 'Brouillon'),
        ('submitted', 'Soumis'),
        ('validated', 'Valid√©'),
        ('rejected', 'Rejet√©'),
        ('signed', 'Sign√©')
    ], string="Statut", default='draft', tracking=True)

    document_ids = fields.One2many('gestion_documents_stage.document', 'request_id', string="Documents de Stage")

    # Exemplaires des documents de stage
    document_demande = fields.Binary(string="Exemplaire Demande de Stage")
    document_convention = fields.Binary(string="Exemplaire Convention de Stage")
    document_fiche = fields.Binary(string="Exemplaire Fiche de Stage")



    # Actions pour changer l‚Äô√©tat de la demande
    def action_submit(self):
        self.state = 'submitted'

    def action_validate(self):
        self.state = 'validated'

    def action_reject(self):
        self.state = 'rejected'

    def action_sign(self):
        self.state = 'signed'

    # Action pour t√©l√©charger le fichier 'Demande de Stage'
    def action_download_demande(self):
        if not self.document_demande:
            raise ValidationError("Le document 'Demande de Stage' n'a pas √©t√© t√©l√©charg√©.")
        return {
            'type': 'ir.actions.act_url',
            'url': f'/web/content/{self._name},{self.id},document_demande?download=true',
            'target': 'new'
        }

    # Action pour t√©l√©charger le fichier 'Convention de Stage'
    def action_download_convention(self):
        if not self.document_convention:
            raise ValidationError("Le document 'Convention de Stage' n'a pas √©t√© t√©l√©charg√©.")
        return {
            'type': 'ir.actions.act_url',
            'url': f'/web/content/{self._name},{self.id},document_convention?download=true',
            'target': 'new'
        }

    # Action pour t√©l√©charger le fichier 'Fiche de Stage'

    def action_download_fiche(self):
        if not self.document_fiche:
            raise ValidationError("Le document 'Fiche de Stage' n'a pas √©t√© t√©l√©charg√©.")
        return {
        'type': 'ir.actions.act_url',
        'url': f'/web/content/{self._name}/{self.id}/document_fiche?download=true',
        'target': 'new',
    }
    def action_submit_documents(self):
        if not self.document_ids:
            raise ValidationError("Veuillez t√©l√©charger au moins un document.")
        self.state = 'submitted'
        # M√©thode pour accepter les documents
    def action_accept_documents(self):
        for record in self:
            # Accepter tous les documents li√©s et changer leur √©tat
            for document in record.document_ids:
                if document.state == 'draft':
                    document.state = 'validated'
            record.state = 'validated'  # Changer l‚Äô√©tat global de la demande
        return {
                    'effect': {
                    'fadeout': 'slow',
                    'message': "Les documents ont √©t√© accept√©s avec succ√®s.",
                    'type': 'rainbow_man',
                    },
                    'type': 'ir.actions.client',
                    'tag': 'reload',
        }

    def action_reject_documents(self):
        for record in self:
            # Rejeter tous les documents li√©s et changer l'√©tat de la demande
            record.state = 'rejected'  # Change l‚Äô√©tat global de la demande
        return {
            'effect': {
                'fadeout': 'slow',
                'message': "Les documents ont √©t√© rejet√©s. Veuillez les resoumettre.",
                'type': 'rainbow_man',
            },
            'reload': True
        }


    # V√©rification des dates
    @api.constrains('date_debut', 'date_fin')
    def _check_dates(self):
        for record in self:
            if record.date_debut and record.date_fin and record.date_debut >= record.date_fin:
                raise ValidationError("La date de d√©but doit √™tre avant la date de fin.")

class Document(models.Model):
    _name = 'gestion_documents_stage.document'
    _description = 'Document de Stage'

    name = fields.Char(string="Nom du Document", required=True)
    document_type = fields.Selection([
        ('demande', 'Demande de Stage'),
        ('convention', 'Convention de Stage'),
        ('fiche', 'Fiche de Stage')
    ], string="Type de Document", required=True)
    file = fields.Binary(string="Fichier", required=True)
    request_id = fields.Many2one('gestion_documents_stage.request', string="Demande de Stage", ondelete="cascade")
    signature = fields.Binary(string="Signature", attachment=True)

    state = fields.Selection([
        ('draft', 'Brouillon'),
            ('validated', 'Valid√©'),  # ‚úÖ Ajout de l'√©tat "Valid√©"
        ('signed', 'Sign√©')
    ], string="Statut", default='draft', tracking=True)
   
    

    def action_sign(self):
        for record in self:
            if not record.signature:
                raise ValidationError("Veuillez ajouter une signature avant de valider.")
            if record.state == 'signed':
                raise ValidationError("Ce document est d√©j√† sign√©.")
            record.state = 'signed'

        return {
            'effect': {
                'fadeout': 'slow',
                'message': "üéâ Le document a √©t√© sign√© avec succ√®s !",
                'type': 'rainbow_man',
            }
        }


class Signature(models.Model):
    _name = 'gestion_documents_stage.signature'
    _description = 'Signature des Documents'

    request_id = fields.Many2one('gestion_documents_stage.request', string="Demande de Stage", ondelete="cascade")
    signed_by = fields.Many2one('res.users', string="Sign√© par", default=lambda self: self.env.user)
    signed_date = fields.Datetime(string="Date de Signature", default=fields.Datetime.now)
    document_id = fields.Many2one('gestion_documents_stage.document', string="Document Sign√©")
    signature = fields.Binary(string="Signature", attachment=True)

    @api.constrains('signature')
    def _check_signature(self):
        for record in self:
            if not record.signature:
                raise ValidationError("La signature √©lectronique est obligatoire pour cette action.")
